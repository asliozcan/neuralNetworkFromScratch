


import numpy as np


SAMPLE_DATA_SIGMOID = np.array([[0.63600155, 0.06244853, 0.70343718, 0.3677118 , 0.84091441,
        0.92698572, 0.97530835, 0.16219455, 0.68520516, 0.02438435],
       [0.56486348, 0.77752281, 0.02814279, 0.40455642, 0.39334021,
        0.33343327, 0.62856558, 0.20736208, 0.4791117 , 0.65737401],
       [0.27319754, 0.8454934 , 0.77713391, 0.0203637 , 0.89278455,
        0.7148855 , 0.34292304, 0.2001029 , 0.05677996, 0.27170045],
       [0.67975977, 0.11108303, 0.51846784, 0.52007146, 0.34255231,
        0.98557676, 0.53614407, 0.14256395, 0.33846393, 0.62161775],
       [0.08686224, 0.17624703, 0.93615735, 0.28376258, 0.87854092,
        0.80607948, 0.24442157, 0.86286869, 0.17823176, 0.8541392 ],
       [0.14656862, 0.43241023, 0.0087767 , 0.38091758, 0.78601786,
        0.33439644, 0.32355162, 0.50158875, 0.17291792, 0.13904915],
       [0.19548261, 0.29957334, 0.51873925, 0.02311674, 0.97398502,
        0.03465983, 0.36084813, 0.83349872, 0.18540484, 0.59761167],
       [0.43989783, 0.36350933, 0.55178148, 0.85989393, 0.90065453,
        0.86604459, 0.38074904, 0.13069431, 0.60123619, 0.29545739],
       [0.22701861, 0.16232551, 0.05589484, 0.28755525, 0.70951975,
        0.11310016, 0.71841294, 0.7812451 , 0.30934355, 0.46064508],
       [0.35311503, 0.3847327 , 0.86019238, 0.58020615, 0.72667868,
        0.97768278, 0.50272833, 0.96155167, 0.72047383, 0.11737618]])

SAMPLE_DATA_SIGMOID_RESULT = np.array([[0.65384905, 0.51560706, 0.6689494 , 0.59090595, 0.69865777,
        0.71646335, 0.7261763 , 0.54045998, 0.66489944, 0.50609579],
       [0.63757711, 0.68514598, 0.50703523, 0.5997819 , 0.59708653,
        0.58259451, 0.65216414, 0.55165556, 0.61753809, 0.65867025],
       [0.56787773, 0.69962093, 0.68506208, 0.50509075, 0.70946447,
        0.67147978, 0.58490039, 0.54985947, 0.51419118, 0.56751032],
       [0.66368508, 0.52774224, 0.62678943, 0.62716447, 0.58481037,
        0.72821336, 0.63091497, 0.53558074, 0.58381734, 0.65058639],
       [0.52170192, 0.54394805, 0.71832281, 0.57046843, 0.70651977,
        0.69127344, 0.56080299, 0.70325966, 0.54444036, 0.70143471],
       [0.5365767 , 0.60644906, 0.50219416, 0.59409439, 0.68697565,
        0.58282871, 0.58018956, 0.62283262, 0.54312209, 0.53470639],
       [0.54871562, 0.57433821, 0.62685291, 0.50577893, 0.72591308,
        0.50866409, 0.58924573, 0.69709421, 0.54621889, 0.6451097 ],
       [0.60823469, 0.58988968, 0.63454881, 0.70263849, 0.71108399,
        0.70392199, 0.59405375, 0.53262715, 0.64593908, 0.57333166],
       [0.55651215, 0.5404925 , 0.51397007, 0.57139751, 0.67029503,
        0.52824494, 0.67225744, 0.6859484 , 0.57672502, 0.6131672 ],
       [0.58737276, 0.59501406, 0.70270085, 0.64111484, 0.67407601,
        0.72664819, 0.62310028, 0.72343237, 0.67271135, 0.5293104 ]])

SAMPLE_DATA_RELU = np.array([[0.50051107, 0.23403925, 0.02837364, 0.63475884, 0.65676318,
        0.35381672, 0.79981041, 0.89399985, 0.77660592, 0.64457218],
       [0.08462465, 0.49579714, 0.02917413, 0.76833326, 0.87852275,
        0.06678062, 0.12547943, 0.77602984, 0.2185254 , 0.9852109 ],
       [0.30460172, 0.00895816, 0.11080489, 0.56189378, 0.91965434,
        0.94328277, 0.68680474, 0.57248362, 0.61429155, 0.44591543],
       [0.23414211, 0.27016282, 0.98203734, 0.06333586, 0.60390333,
        0.89594169, 0.68757422, 0.18990584, 0.63030308, 0.71485585],
       [0.48859787, 0.91691083, 0.11693554, 0.24026545, 0.68137854,
        0.46579136, 0.22100786, 0.84235835, 0.04789   , 0.327287  ],
       [0.48414465, 0.87938233, 0.73718764, 0.26409083, 0.883979  ,
        0.77447067, 0.55049291, 0.66955784, 0.7286518 , 0.10492957],
       [0.25850213, 0.5972435 , 0.72459596, 0.34548671, 0.11752621,
        0.00672375, 0.79647953, 0.5468705 , 0.72858936, 0.52132281],
       [0.60114539, 0.7569016 , 0.46504231, 0.06911499, 0.24402529,
        0.89594749, 0.78524412, 0.10852317, 0.97375279, 0.81423347],
       [0.74491127, 0.1773186 , 0.03736761, 0.83808723, 0.42889184,
        0.48216208, 0.62527562, 0.63166487, 0.10119352, 0.04748001],
       [0.88540684, 0.17091767, 0.58442398, 0.10664376, 0.09142992,
        0.83325604, 0.23485661, 0.76602457, 0.04618012, 0.67179429]])

SAMPLE_DATA_RELU_RESULT = np.array([[0.50051107, 0.23403925, 0.02837364, 0.63475884, 0.65676318,
        0.35381672, 0.79981041, 0.89399985, 0.77660592, 0.64457218],
       [0.08462465, 0.49579714, 0.02917413, 0.76833326, 0.87852275,
        0.06678062, 0.12547943, 0.77602984, 0.2185254 , 0.9852109 ],
       [0.30460172, 0.00895816, 0.11080489, 0.56189378, 0.91965434,
        0.94328277, 0.68680474, 0.57248362, 0.61429155, 0.44591543],
       [0.23414211, 0.27016282, 0.98203734, 0.06333586, 0.60390333,
        0.89594169, 0.68757422, 0.18990584, 0.63030308, 0.71485585],
       [0.48859787, 0.91691083, 0.11693554, 0.24026545, 0.68137854,
        0.46579136, 0.22100786, 0.84235835, 0.04789   , 0.327287  ],
       [0.48414465, 0.87938233, 0.73718764, 0.26409083, 0.883979  ,
        0.77447067, 0.55049291, 0.66955784, 0.7286518 , 0.10492957],
       [0.25850213, 0.5972435 , 0.72459596, 0.34548671, 0.11752621,
        0.00672375, 0.79647953, 0.5468705 , 0.72858936, 0.52132281],
       [0.60114539, 0.7569016 , 0.46504231, 0.06911499, 0.24402529,
        0.89594749, 0.78524412, 0.10852317, 0.97375279, 0.81423347],
       [0.74491127, 0.1773186 , 0.03736761, 0.83808723, 0.42889184,
        0.48216208, 0.62527562, 0.63166487, 0.10119352, 0.04748001],
       [0.88540684, 0.17091767, 0.58442398, 0.10664376, 0.09142992,
        0.83325604, 0.23485661, 0.76602457, 0.04618012, 0.67179429]])


SAMPLE_DATA_COST_Y = np.array([[0.14664598, 0.10012058],
       [0.58958759, 0.698994  ],
       [0.61672428, 0.49692433],
       [0.91638048, 0.01091912],
       [0.15890042, 0.24084781]])

SAMPLE_DATA_COST_Y_PREDICT = np.array([[0.93921682, 0.7959142 ],
       [0.7862682 , 0.88657393],
       [0.71274709, 0.05922099],
       [0.72522229, 0.82836381],
       [0.37858954, 0.43062208]])

COST_SAMPLE_RESULT = 2.17600624224

def numericDerive(func, x, h=np.finfo(np.float32).eps ):
    return (func(x+h) - func(x)) / h

def numericDerive2 (func, x, y, h=np.finfo(np.float32).eps, k=np.finfo(np.float32).eps ):
        return (func(x+h, y+k)-func(x, y)) / h